{"version":3,"file":"static/js/518.abc6ee17.chunk.js","mappings":"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","sources":["components/About.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { motion } from 'framer-motion';\nimport { useAuth } from '../contexts/AuthContext';\nimport { aboutAPI } from '../services/api';\n\n// About 데이터 타입 정의\ninterface AboutData {\n  _id: string;\n  title: string;\n  content: string;\n  htmlContent: string;\n  isActive: boolean;\n}\n\nconst About: React.FC = () => {\n  const { isAuthenticated } = useAuth();\n  const [aboutData, setAboutData] = useState<AboutData | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isEditing, setIsEditing] = useState(false);\n  const [editContent, setEditContent] = useState('');\n  const editorRef = useRef<HTMLDivElement>(null);\n\n  // About 데이터 가져오기\n  const fetchAboutData = async () => {\n    setIsLoading(true);\n    try {\n      const response = await aboutAPI.getAbout();\n      \n      if (response.success) {\n        setAboutData(response.data);\n        setEditContent(response.data.htmlContent || response.data.content || '');\n      } else {\n        console.error('About 데이터 가져오기 실패:', response.message);\n      }\n    } catch (error) {\n      console.error('About 데이터 가져오기 오류:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // About 내용 저장\n  const saveContent = async () => {\n    if (!isAuthenticated) {\n      alert('로그인이 필요합니다.');\n      return;\n    }\n\n    try {\n      const response = await aboutAPI.updateAbout({\n        htmlContent: editContent\n      });\n      \n      if (response.success) {\n        alert('내용이 저장되었습니다.');\n        setAboutData(response.data);\n        setIsEditing(false);\n      } else {\n        alert(response.message || '저장에 실패했습니다.');\n      }\n    } catch (error) {\n      console.error('About 저장 오류:', error);\n      alert('저장 중 오류가 발생했습니다.');\n    }\n  };\n\n  // 편집 시작\n  const startEditing = () => {\n    setIsEditing(true);\n    setEditContent(aboutData?.htmlContent || aboutData?.content || '');\n  };\n\n  // 편집 취소\n  const cancelEditing = () => {\n    setIsEditing(false);\n    setEditContent(aboutData?.htmlContent || aboutData?.content || '');\n  };\n\n  // 커서 위치 저장 및 복원\n  const saveCursorPosition = () => {\n    const selection = window.getSelection();\n    if (selection && selection.rangeCount > 0 && editorRef.current) {\n      const range = selection.getRangeAt(0);\n      const preCaretRange = range.cloneRange();\n      preCaretRange.selectNodeContents(editorRef.current);\n      preCaretRange.setEnd(range.startContainer, range.startOffset);\n      return preCaretRange.toString().length;\n    }\n    return 0;\n  };\n\n  const restoreCursorPosition = (position: number) => {\n    if (!editorRef.current) return;\n    \n    const selection = window.getSelection();\n    const range = document.createRange();\n    let charIndex = 0;\n    let nodeStack: Node[] = [editorRef.current];\n    let node: Node | undefined;\n    let foundStart = false;\n\n    while (!foundStart && (node = nodeStack.pop())) {\n      if (node.nodeType === Node.TEXT_NODE) {\n        const nextCharIndex = charIndex + (node.textContent?.length || 0);\n        if (position >= charIndex && position <= nextCharIndex) {\n          range.setStart(node, position - charIndex);\n          range.setEnd(node, position - charIndex);\n          foundStart = true;\n        }\n        charIndex = nextCharIndex;\n      } else {\n        for (let i = node.childNodes.length - 1; i >= 0; i--) {\n          nodeStack.push(node.childNodes[i]);\n        }\n      }\n    }\n\n    if (foundStart) {\n      selection?.removeAllRanges();\n      selection?.addRange(range);\n    }\n  };\n\n  // 텍스트 포맷팅 함수들\n  const formatText = (command: string, value?: string) => {\n    if (!editorRef.current) return;\n    \n    const cursorPosition = saveCursorPosition();\n    document.execCommand(command, false, value);\n    setEditContent(editorRef.current.innerHTML);\n    \n    setTimeout(() => {\n      restoreCursorPosition(cursorPosition);\n      editorRef.current?.focus();\n    }, 0);\n  };\n\n  // 이미지 삽입\n  const insertImage = () => {\n    const url = prompt('이미지 URL을 입력하세요:');\n    if (url && editorRef.current) {\n      const selection = window.getSelection();\n      let range;\n      \n      if (selection && selection.rangeCount > 0) {\n        range = selection.getRangeAt(0);\n      } else {\n        range = document.createRange();\n        range.selectNodeContents(editorRef.current);\n        range.collapse(false);\n      }\n      \n      // 이미지 요소 생성 (중앙정렬)\n      const img = document.createElement('img');\n      img.src = url;\n      img.alt = '삽입된 이미지';\n      img.style.cssText = 'max-width: 100%; height: auto; margin: 10px auto; border-radius: 8px; display: block;';\n      \n      // 이미지를 중앙정렬하는 p 태그로 감싸기\n      const imgContainer = document.createElement('p');\n      imgContainer.style.textAlign = 'center';\n      imgContainer.appendChild(img);\n      \n      // 이미지 다음에 올 새로운 p 태그 생성\n      const newP = document.createElement('p');\n      newP.innerHTML = '<br>';\n      \n      // 현재 위치에 이미지 컨테이너와 새 p 태그 삽입\n      range.deleteContents();\n      range.insertNode(newP);\n      range.insertNode(imgContainer);\n      \n      // 커서를 새 p 태그 안으로 이동\n      range.setStart(newP, 0);\n      range.setEnd(newP, 0);\n      \n      // 선택 영역 업데이트\n      selection?.removeAllRanges();\n      selection?.addRange(range);\n      \n      // HTML 콘텐츠 업데이트\n      setEditContent(editorRef.current.innerHTML);\n      \n      // 포커스 유지 및 커서 위치 재설정\n      setTimeout(() => {\n        if (editorRef.current) {\n          editorRef.current.focus();\n          // 커서를 새 p 태그로 다시 이동\n          const newRange = document.createRange();\n          const newSelection = window.getSelection();\n          newRange.setStart(newP, 0);\n          newRange.setEnd(newP, 0);\n          newSelection?.removeAllRanges();\n          newSelection?.addRange(newRange);\n        }\n      }, 10);\n    }\n  };\n\n  // 이미지 갤러리 삽입 (같은 행에 여러 이미지)\n  const insertImageGallery = () => {\n    const urls = prompt('이미지 URL들을 쉼표로 구분하여 입력하세요:');\n    if (urls && editorRef.current) {\n      const urlArray = urls.split(',').map(url => url.trim()).filter(url => url);\n      \n      const selection = window.getSelection();\n      let range;\n      \n      if (selection && selection.rangeCount > 0) {\n        range = selection.getRangeAt(0);\n      } else {\n        range = document.createRange();\n        range.selectNodeContents(editorRef.current);\n        range.collapse(false);\n      }\n      \n      // 갤러리 컨테이너 생성\n      const galleryDiv = document.createElement('div');\n      galleryDiv.style.cssText = 'display: flex; flex-wrap: wrap; gap: 10px; margin: 20px auto; justify-content: center; max-width: 100%;';\n      \n      // 갤러리를 중앙정렬하는 p 태그로 감싸기\n      const galleryContainer = document.createElement('p');\n      galleryContainer.style.textAlign = 'center';\n      galleryContainer.appendChild(galleryDiv);\n      \n      // 각 이미지 추가\n      urlArray.forEach(url => {\n        const img = document.createElement('img');\n        img.src = url;\n        img.alt = '갤러리 이미지';\n        img.style.cssText = 'flex: 1; min-width: 200px; max-width: 300px; height: auto; border-radius: 8px; object-fit: cover;';\n        galleryDiv.appendChild(img);\n      });\n      \n      // 갤러리 다음에 올 새로운 p 태그 생성\n      const newP = document.createElement('p');\n      newP.innerHTML = '<br>';\n      \n      // 현재 위치에 갤러리 컨테이너와 새 p 태그 삽입\n      range.deleteContents();\n      range.insertNode(newP);\n      range.insertNode(galleryContainer);\n      \n      // 커서를 새 p 태그 안으로 이동\n      range.setStart(newP, 0);\n      range.setEnd(newP, 0);\n      \n      // 선택 영역 업데이트\n      selection?.removeAllRanges();\n      selection?.addRange(range);\n      \n      // HTML 콘텐츠 업데이트\n      setEditContent(editorRef.current.innerHTML);\n      \n      // 포커스 유지 및 커서 위치 재설정\n      setTimeout(() => {\n        if (editorRef.current) {\n          editorRef.current.focus();\n          // 커서를 새 p 태그로 다시 이동\n          const newRange = document.createRange();\n          const newSelection = window.getSelection();\n          newRange.setStart(newP, 0);\n          newRange.setEnd(newP, 0);\n          newSelection?.removeAllRanges();\n          newSelection?.addRange(newRange);\n        }\n      }, 10);\n    }\n  };\n\n  // 리치 에디터 초기화\n  useEffect(() => {\n    if (isEditing && editorRef.current) {\n      const currentElement = editorRef.current;\n      \n      if (editContent !== currentElement.innerHTML) {\n        currentElement.innerHTML = editContent || '<p>내용을 입력하세요...</p>';\n      }\n      \n      // 플레이스홀더 스타일 적용\n      const updatePlaceholder = () => {\n        if (currentElement) {\n          const isEmpty = !currentElement.textContent?.trim();\n          if (isEmpty && !editContent) {\n            currentElement.innerHTML = '<p style=\"color: #999; font-style: italic;\">내용을 입력하세요...</p>';\n          }\n        }\n      };\n\n      // 포커스 이벤트 처리\n      const handleFocus = () => {\n        if (currentElement && currentElement.innerHTML.includes('내용을 입력하세요...')) {\n          currentElement.innerHTML = '<p><br></p>';\n          // 커서를 첫 번째 p 태그 안으로 이동\n          const range = document.createRange();\n          const selection = window.getSelection();\n          range.setStart(currentElement.firstChild!, 0);\n          range.collapse(true);\n          selection?.removeAllRanges();\n          selection?.addRange(range);\n        }\n      };\n\n      const handleBlur = () => {\n        updatePlaceholder();\n      };\n\n      // 엔터키 처리\n      const handleKeyDown = (e: KeyboardEvent) => {\n        if (e.key === 'Enter') {\n          e.preventDefault();\n          \n          const selection = window.getSelection();\n          if (selection && selection.rangeCount > 0) {\n            const range = selection.getRangeAt(0);\n            \n            // 새로운 p 태그 생성\n            const newP = document.createElement('p');\n            newP.innerHTML = '<br>';\n            \n            // 현재 위치에 새 p 태그 삽입\n            range.deleteContents();\n            range.insertNode(newP);\n            \n            // 커서를 새 p 태그 안으로 이동\n            range.setStart(newP, 0);\n            range.setEnd(newP, 0);\n            selection.removeAllRanges();\n            selection.addRange(range);\n            \n            // HTML 콘텐츠 업데이트\n            setEditContent(currentElement.innerHTML);\n          }\n        }\n      };\n\n      currentElement.addEventListener('focus', handleFocus);\n      currentElement.addEventListener('blur', handleBlur);\n      currentElement.addEventListener('keydown', handleKeyDown);\n      \n      updatePlaceholder();\n\n      return () => {\n        const element = currentElement; // 클린업 함수에서 사용할 변수로 복사\n        element.removeEventListener('focus', handleFocus);\n        element.removeEventListener('blur', handleBlur);\n        element.removeEventListener('keydown', handleKeyDown);\n      };\n    }\n  }, [isEditing, editContent]);\n\n  // 컴포넌트 마운트 시 데이터 로드\n  useEffect(() => {\n    fetchAboutData();\n  }, []);\n\n  if (isLoading) {\n    return (\n      <div className=\"page-content\">\n        <div className=\"page-header\">\n          <h1 className=\"page-title\">\n            ABOUT\n            <motion.div \n              className=\"page-subtitle-container\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 0.6, duration: 1 }}\n            ></motion.div>\n            <div className=\"page-subtitle\" style={{position: 'relative', top: 'auto', left: 'auto', transform: 'none', marginTop: '0'}}>노드 트리(NODE TREE)\n              \n            </div>\n          </h1>\n        </div>\n        <div style={{ textAlign: 'center', padding: '2rem' }}>\n          <p>로딩 중...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"page-content\">\n      <div className=\"page-header\">\n        <h1 className=\"page-title\">\n          ABOUT\n          <motion.div \n            className=\"page-subtitle-container\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.6, duration: 1 }}\n          ></motion.div>\n          <div className=\"page-subtitle\" style={{position: 'relative', top: 'auto', left: 'auto', transform: 'none', marginTop: '0'}}>노드 트리(NODE TREE)\n            \n          </div>\n        </h1>\n      </div>\n      \n      {/* 편집 버튼 - Work 페이지와 동일한 스타일로 오른쪽 정렬 */}\n      {isAuthenticated && !isEditing && (\n        <div className=\"work-header\">\n          <motion.button\n            className=\"write-button\"\n            onClick={startEditing}\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n                      >\n              내용 편집\n            </motion.button>\n        </div>\n      )}\n\n      {/* 편집 모드 */}\n      {isEditing ? (\n        <div style={{ maxWidth: '1000px', margin: '0 auto' }}>\n          {/* 편집 도구 모음 */}\n          <div style={{\n            backgroundColor: '#f5f5f5',\n            padding: '1rem',\n            borderRadius: '8px 8px 0 0',\n            border: '1px solid #ddd',\n            display: 'flex',\n            flexWrap: 'wrap',\n            gap: '0.5rem',\n            alignItems: 'center'\n          }}>\n            {/* 텍스트 포맷팅 */}\n            <button onClick={() => formatText('bold')} style={toolbarButtonStyle}>\n              <strong>B</strong>\n            </button>\n            <button onClick={() => formatText('italic')} style={toolbarButtonStyle}>\n              <em>I</em>\n            </button>\n            <button onClick={() => formatText('underline')} style={toolbarButtonStyle}>\n              <u>U</u>\n            </button>\n            \n            <div style={{ width: '1px', height: '20px', backgroundColor: '#ccc', margin: '0 0.5rem' }} />\n            \n            {/* 정렬 */}\n            <button onClick={() => formatText('justifyLeft')} style={toolbarButtonStyle}>\n              왼쪽\n            </button>\n            <button onClick={() => formatText('justifyCenter')} style={toolbarButtonStyle}>\n              중앙\n            </button>\n            <button onClick={() => formatText('justifyRight')} style={toolbarButtonStyle}>\n              오른쪽\n            </button>\n            \n            <div style={{ width: '1px', height: '20px', backgroundColor: '#ccc', margin: '0 0.5rem' }} />\n            \n            {/* 제목 크기 */}\n            <select \n              onChange={(e) => formatText('formatBlock', e.target.value)}\n              style={{ padding: '0.25rem', borderRadius: '4px', border: '1px solid #ccc' }}\n            >\n              <option value=\"\">텍스트 크기</option>\n              <option value=\"h1\">제목 1</option>\n              <option value=\"h2\">제목 2</option>\n              <option value=\"h3\">제목 3</option>\n              <option value=\"p\">본문</option>\n            </select>\n            \n            {/* 글꼴 크기 */}\n            <select \n              onChange={(e) => formatText('fontSize', e.target.value)}\n              style={{ padding: '0.25rem', borderRadius: '4px', border: '1px solid #ccc' }}\n            >\n              <option value=\"\">글꼴 크기</option>\n              <option value=\"1\">매우 작게</option>\n              <option value=\"2\">작게</option>\n              <option value=\"3\">보통</option>\n              <option value=\"4\">크게</option>\n              <option value=\"5\">매우 크게</option>\n              <option value=\"6\">거대하게</option>\n              <option value=\"7\">최대</option>\n            </select>\n            \n            <div style={{ width: '1px', height: '20px', backgroundColor: '#ccc', margin: '0 0.5rem' }} />\n            \n            {/* 이미지 */}\n            <button onClick={insertImage} style={toolbarButtonStyle}>\n              🖼️ 이미지\n            </button>\n            <button onClick={insertImageGallery} style={toolbarButtonStyle}>\n              🖼️ 갤러리\n            </button>\n          </div>\n          \n          {/* 편집 영역 */}\n          <div\n            ref={editorRef}\n            contentEditable\n            suppressContentEditableWarning\n            onInput={(e) => {\n              const target = e.target as HTMLDivElement;\n              setEditContent(target.innerHTML);\n            }}\n            onBlur={(e) => {\n              const target = e.target as HTMLDivElement;\n              setEditContent(target.innerHTML);\n            }}\n            style={{\n              minHeight: '400px',\n              padding: '2rem',\n              border: '1px solid #ddd',\n              borderTop: 'none',\n              borderRadius: '0 0 8px 8px',\n              backgroundColor: '#fff',\n              outline: 'none',\n              lineHeight: '1.6',\n              fontSize: '1rem',\n              textAlign: 'center'\n            }}\n          />\n          \n          {/* 저장/취소 버튼 */}\n          <div style={{ textAlign: 'center', marginTop: '1rem', display: 'flex', gap: '1rem', justifyContent: 'center' }}>\n            <button\n              onClick={cancelEditing}\n              style={{\n                padding: '0.75rem 1.5rem',\n                backgroundColor: '#f0f0f0',\n                border: '1px solid #ccc',\n                borderRadius: '4px',\n                cursor: 'pointer'\n              }}\n            >\n              취소\n            </button>\n            <button\n              onClick={saveContent}\n              style={{\n                padding: '0.75rem 1.5rem',\n                backgroundColor: '#000',\n                color: '#fff',\n                border: 'none',\n                borderRadius: '4px',\n                cursor: 'pointer'\n              }}\n            >\n              저장\n            </button>\n          </div>\n        </div>\n      ) : (\n        /* 보기 모드 */\n        <div style={{ \n          maxWidth: '1000px', \n          margin: '0 auto', \n          textAlign: 'center',\n          lineHeight: '1.8',\n          fontSize: '1.1rem'\n        }}>\n          {aboutData?.htmlContent ? (\n            <div \n              dangerouslySetInnerHTML={{ __html: aboutData.htmlContent }}\n              style={{ textAlign: 'center' }}\n            />\n          ) : (\n            <div style={{ textAlign: 'center' }}>\n              <h2>NODE TREE</h2>\n              <p>{aboutData?.content || 'About 내용을 불러올 수 없습니다.'}</p>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\n// 도구 모음 버튼 스타일\nconst toolbarButtonStyle: React.CSSProperties = {\n  padding: '0.5rem 0.75rem',\n  backgroundColor: '#fff',\n  border: '1px solid #ccc',\n  borderRadius: '4px',\n  cursor: 'pointer',\n  fontSize: '0.9rem',\n  minWidth: '40px'\n};\n\nexport default About; "],"names":["toolbarButtonStyle","padding","backgroundColor","border","borderRadius","cursor","fontSize","minWidth","About","isAuthenticated","useAuth","aboutData","setAboutData","useState","isLoading","setIsLoading","isEditing","setIsEditing","editContent","setEditContent","editorRef","useRef","formatText","command","value","current","cursorPosition","saveCursorPosition","selection","window","getSelection","rangeCount","range","getRangeAt","preCaretRange","cloneRange","selectNodeContents","setEnd","startContainer","startOffset","toString","length","document","execCommand","innerHTML","setTimeout","_editorRef$current","position","createRange","node","charIndex","nodeStack","foundStart","pop","nodeType","Node","TEXT_NODE","_node$textContent","nextCharIndex","textContent","setStart","i","childNodes","push","removeAllRanges","addRange","restoreCursorPosition","focus","useEffect","currentElement","updatePlaceholder","_currentElement$textC","trim","handleFocus","includes","firstChild","collapse","handleBlur","handleKeyDown","e","key","preventDefault","newP","createElement","deleteContents","insertNode","addEventListener","element","removeEventListener","async","response","aboutAPI","getAbout","success","data","htmlContent","content","console","error","message","fetchAboutData","_jsxs","className","children","_jsx","motion","div","initial","opacity","animate","transition","delay","duration","style","top","left","transform","marginTop","textAlign","button","onClick","startEditing","whileHover","scale","whileTap","maxWidth","margin","display","flexWrap","gap","alignItems","width","height","onChange","target","insertImage","url","prompt","img","src","alt","cssText","imgContainer","appendChild","newRange","newSelection","insertImageGallery","urls","urlArray","split","map","filter","galleryDiv","galleryContainer","forEach","ref","contentEditable","suppressContentEditableWarning","onInput","onBlur","minHeight","borderTop","outline","lineHeight","justifyContent","cancelEditing","updateAbout","alert","color","dangerouslySetInnerHTML","__html"],"sourceRoot":""}